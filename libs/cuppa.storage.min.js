export class CuppaStorage{static LOCAL="LOCAL";static SESSION="SESSION";static INDEXED_DB="INDEXED_DB";static db;static defaultData={};static data={};static callbacks={};static async setData({name:name="default",data:data=null,store:store="",silence:silence=!1}){String(store).toUpperCase()===CuppaStorage.LOCAL?localStorage.setItem(name,JSON.stringify(data)):String(store).toUpperCase()===CuppaStorage.SESSION?sessionStorage.setItem(name,JSON.stringify(data)):String(store).toUpperCase()===CuppaStorage.INDEXED_DB?await CuppaStorage.db.add(name,data):CuppaStorage.data[name]=data,silence||CuppaStorage.executeCallbacks({name:name,data:data})}static setDataSync({name:name="default",data:data=null,store:store="",silence:silence=!1}){String(store).toUpperCase()===CuppaStorage.LOCAL?localStorage.setItem(name,JSON.stringify(data)):String(store).toUpperCase()===CuppaStorage.SESSION?sessionStorage.setItem(name,JSON.stringify(data)):CuppaStorage.data[name]=data,silence||CuppaStorage.executeCallbacks({name:name,data:data})}static async getData({name:name="default",callback:callback=null,store:store="",defaultValue:defaultValue=null}){let data;if(String(store).toUpperCase()===CuppaStorage.LOCAL){let ls=localStorage.getItem(name);ls&&(data=JSON.parse(ls))}else if(String(store).toUpperCase()===CuppaStorage.SESSION){let st=sessionStorage.getItem(name);st&&(data=JSON.parse(st))}else data=String(store).toUpperCase()===CuppaStorage.INDEXED_DB?await CuppaStorage.db.get(name):CuppaStorage.data[name];return void 0===data&&(data=defaultValue),null!=data&&callback&&callback(data),callback&&CuppaStorage.addCallback({name:name,callback:callback}),data}static getDataSync({name:name="default",callback:callback=null,store:store="",defaultValue:defaultValue=null}){let data;if(String(store).toUpperCase()===CuppaStorage.LOCAL){let ls=localStorage.getItem(name);ls&&(data=JSON.parse(ls))}else if(String(store).toUpperCase()===CuppaStorage.SESSION){let st=sessionStorage.getItem(name);st&&(data=JSON.parse(st))}else data=CuppaStorage.data[name];return void 0===data&&(data=defaultValue),null!=data&&callback&&callback(data),callback&&CuppaStorage.addCallback({name:name,callback:callback}),data}static removeCallback({name:name,callback:callback,likeString:likeString=!1}){if(!CuppaStorage.callbacks[name])return;let array=CuppaStorage.callbacks[name];for(let i=0;i<array.length;i++)likeString?array[i].toString()===callback.toString()&&array.splice(i,1):array[i]===callback&&array.splice(i,1)}static removeAllCallbacks({name:name}){delete CuppaStorage.callbacks[name]}static executeCallbacks({name:name,data:data}){if(!CuppaStorage.callbacks[name])return;let array=CuppaStorage.callbacks[name];for(let i=0;i<array.length;i++)array[i](data)}static addCallback=function({name:name,callback:callback}){CuppaStorage.callbacks[name]||(CuppaStorage.callbacks[name]=[]),CuppaStorage.callbacks[name].push(callback)}}document.defaultView.CuppaStorage||(document.defaultView.CuppaStorage=CuppaStorage);export class GetStorage extends HTMLElement{name;store;defaultValue;data;constructor(){super(),bindAll(this)}connectedCallback(){setTimeout(()=>{this.name=this.getAttribute("name"),this.store=this.getAttribute("store"),this.defaultValue=this.getAttribute("default-value"),CuppaStorage.getData({name:this.name,callback:this.onUpdateStorage,defaultValue:this.defaultValue,store:this.store}).then()},0)}onUpdateStorage(data){this.data=data,this.dispatchEvent(new CustomEvent("change",{detail:this.data}))}disconnectedCallback(){CuppaStorage.removeCallback({name:this.name,callback:this.onUpdateStorage})}}document.defaultView.GetStorage||(customElements.define("get-storage",GetStorage),document.defaultView.GetStorage=GetStorage);class CuppaStorageInnoDB{config={db:"cuppa_db",storage:"cuppa_storage",version:1,update:!1};db;constructor(config){this.config={...this.config,...config},bindAll(this)}async connect(){let config=this.config;if(indexedDB.databases){let currentDB=await indexedDB.databases();currentDB=currentDB.filter(db=>db.name==config.db)[0],config.version=currentDB&&config.update?currentDB.version+1:currentDB?currentDB.version:config.version}else config.version=config.version;const request=indexedDB.open(config.db,config.version);return request.onupgradeneeded=this.onUpdateDB,await new Promise(resolve=>{request.onsuccess=e=>{this.db=e.target.result,resolve(this)}})}async onUpdateDB(e){this.db=e.target.result;let{db:db,config:config}=this;db.objectStoreNames.contains(config.storage)||db.createObjectStore(config.storage,{keyPath:"name"})}async add(name,value,returnValue){this.db||await this.connect();let{db:db,config:config}=this,transaction,storage=db.transaction(config.storage,"readwrite").objectStore(config.storage),data={name:name,value:value};return await new Promise(resolve=>{let request=storage.put(data);request.onsuccess=()=>{resolve(request.result)},request.onerror=err=>{resolve(null,err.target.error)}}),await this.get(name,returnValue)}async get(name,returnValue){null==returnValue&&(returnValue=!0),this.db||await this.connect();let{db:db,config:config}=this,transaction,storage=db.transaction(config.storage,"readwrite").objectStore(config.storage),result;return await new Promise(resolve=>{let request=storage.get(name);request.onsuccess=()=>{resolve(returnValue&&request.result?request.result.value:request.result)},request.onerror=err=>{resolve(null)}})}async delete(name){this.db||await this.connect();let{db:db,config:config}=this,transaction,storage;db.transaction(config.storage,"readwrite").objectStore(config.storage).delete(name)}}function bindAll(element,isFunction){let propertyNames=Object.getOwnPropertyNames(Object.getPrototypeOf(element));isFunction&&(propertyNames=Object.keys(element));for(let i=0;i<propertyNames.length;i++)"function"==typeof element[propertyNames[i]]&&(element[propertyNames[i]]=element[propertyNames[i]].bind(element))}CuppaStorage.db=new CuppaStorageInnoDB;